name: CI Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: studiohub_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        uv sync --extra dev --extra test
        echo "Checking if ruff is installed..."
        uv run python -c "import sys; print(sys.executable)"
        uv run which ruff || echo "ruff not in PATH"
    
    - name: Run backend linting
      working-directory: ./backend
      run: |
        echo "Running ruff check..."
        uv run ruff check .
        echo "Running ruff format check..."
        uv run ruff format --check .
    
    
    - name: Run backend tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/studiohub_test
        REDIS_URL: redis://localhost:6379
        TESTING: true
      run: |
        uv run pytest -v --cov=app --cov-report=xml --cov-report=term-missing

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check if frontend exists
      id: check_frontend
      run: |
        if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Frontend directory not found - skipping frontend tests"
        fi
    
    - name: Set up Node.js
      if: steps.check_frontend.outputs.exists == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      if: steps.check_frontend.outputs.exists == 'true'
      working-directory: ./frontend
      run: npm ci
    
    - name: Run frontend linting
      if: steps.check_frontend.outputs.exists == 'true'
      working-directory: ./frontend
      run: npm run lint
    
    - name: Run frontend type checking
      if: steps.check_frontend.outputs.exists == 'true'
      working-directory: ./frontend
      run: npm run type-check
    
    - name: Run frontend tests
      if: steps.check_frontend.outputs.exists == 'true'
      working-directory: ./frontend
      run: npm run test:ci
    
    - name: Build frontend
      if: steps.check_frontend.outputs.exists == 'true'
      working-directory: ./frontend
      run: npm run build
    
    - name: Skip frontend (not implemented yet)
      if: steps.check_frontend.outputs.exists == 'false'
      run: echo "Skipping frontend tests - will be implemented in M1"

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: studiohub_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: uv sync --extra dev --extra test
    
    - name: Install frontend dependencies (if exists)
      run: |
        if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
          cd frontend && npm ci
        else
          echo "Skipping frontend install - not implemented yet"
        fi
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/studiohub_test
        REDIS_URL: redis://localhost:6379
        TESTING: true
      run: |
        cd backend && uv run pytest tests/integration/ -v